var Ie=Object.defineProperty,Fe=Object.defineProperties;var Oe=Object.getOwnPropertyDescriptors;var ce=Object.getOwnPropertySymbols;var Ne=Object.prototype.hasOwnProperty,we=Object.prototype.propertyIsEnumerable;var oe=(n,e,r)=>e in n?Ie(n,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):n[e]=r,re=(n,e)=>{for(var r in e||(e={}))Ne.call(e,r)&&oe(n,r,e[r]);if(ce)for(var r of ce(e))we.call(e,r)&&oe(n,r,e[r]);return n},ne=(n,e)=>Fe(n,Oe(e));var y=(n,e,r)=>(oe(n,typeof e!="symbol"?e+"":e,r),r);import{d as Pe,c as K,a as Y,F as qe,r as Re,n as Z,o as V,t as xe,i as Q,b as Ae,e as le,f as ee,g as Ee,h as z,j as ve,p as Le,k as Me,l as Ce,m as me,q as F,s as M,u as se,v as E,w as ke,x as ue,y as ge,S as Te,z as We,A as Ve,B as He,C as Be}from"./vendor.b9e80e26.js";const Xe=function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))i(t);new MutationObserver(t=>{for(const o of t)if(o.type==="childList")for(const s of o.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&i(s)}).observe(document,{childList:!0,subtree:!0});function r(t){const o={};return t.integrity&&(o.integrity=t.integrity),t.referrerpolicy&&(o.referrerPolicy=t.referrerpolicy),t.crossorigin==="use-credentials"?o.credentials="include":t.crossorigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function i(t){if(t.ep)return;t.ep=!0;const o=r(t);fetch(t.href,o)}};Xe();const $e="modulepreload",de={},je="/tracejs/",v=function(e,r){return!r||r.length===0?e():Promise.all(r.map(i=>{if(i=`${je}${i}`,i in de)return;de[i]=!0;const t=i.endsWith(".css"),o=t?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${i}"]${o}`))return;const s=document.createElement("link");if(s.rel=t?"stylesheet":$e,t||(s.as="script",s.crossOrigin=""),s.href=i,document.head.appendChild(s),t)return new Promise((p,f)=>{s.addEventListener("load",p),s.addEventListener("error",f)})})).then(()=>e())};var _e=(n,e)=>{const r=n.__vccOpts||n;for(const[i,t]of e)r[i]=t;return r};const ze=Pe({name:"NavigationTabs",props:{labels:{type:Array,required:!0},activeIndex:{type:Number,default:0},isBoxed:{type:Boolean,default:!1}},emits:["update:activeIndex"],setup(n,{emit:e}){return{setActiveIndex:r=>e("update:activeIndex",r)}}}),Ue={style:{padding:"0.25rem 0 0 0.5rem"}},Ge=["onClick"];function Je(n,e,r,i,t,o){return V(),K("div",{class:Z({tabs:!0,"is-boxed":n.isBoxed})},[Y("ul",Ue,[(V(!0),K(qe,null,Re(n.labels,(s,p)=>(V(),K("li",{key:p,class:Z({"is-active":n.activeIndex===p})},[Y("a",{onClick:f=>n.setActiveIndex(p)},xe(s),9,Ge)],2))),128))])],2)}var Ke=_e(ze,[["render",Je]]);class Qe extends Error{constructor(e){super(e);Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}}class he extends Qe{constructor(e="The provided model input contains invalid characters"){super(e);Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}}var L;(function(n){n[n.NORMAL=1]="NORMAL",n[n.AMBIG=2]="AMBIG",n[n.ALLOPHONE=3]="ALLOPHONE",n[n.OTHER=4]="OTHER"})(L||(L={}));const _t=(n=te())=>({label:"",features:Array(n.numFeatures*n.continuaPerFeature).fill(0),durationScalar:Array(n.continuaPerFeature).fill(1),phonologicalRole:L.NORMAL}),te=()=>({continuaPerFeature:7,numFeatures:9,modelInput:"-^br^pt-",spread:[6,6,6,6,6,6,6],spreadScale:[1,1,1,1,1,1,1],min:-.3,max:1,nreps:1,slicesPerPhon:3,fSlices:99,decay:{F:.01,P:.03,W:.05},rest:{F:-.1,P:-.1,W:-.01},alpha:{IF:1,FP:.02,PW:.05,WP:.03,PF:0},gamma:{F:.04,P:.04,W:.03},deltaInput:6,noiseSD:0,stochasticitySD:0,atten:1,bias:0,learningrate:0,lengthNormalization:0,phonology:[{label:"p",features:[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,.2,0,0,0,0,0,0,0],durationScalar:[1,1,1,1,1,1,1],phonologicalRole:L.NORMAL},{label:"b",features:[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,.2,1,0,0,0,0,0,0,0],durationScalar:[1,1,1,1,1,1,1],phonologicalRole:L.NORMAL},{label:"t",features:[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,.2,0,0,0,0,0],durationScalar:[1,1,1,1,1,1,1],phonologicalRole:L.NORMAL},{label:"d",features:[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,.2,1,0,0,0,0,0],durationScalar:[1,1,1,1,1,1,1],phonologicalRole:L.NORMAL},{label:"k",features:[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,.1,.3,1,.3,.1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,.2,0,0,0],durationScalar:[1,1,1,1,1,1,1],phonologicalRole:L.NORMAL},{label:"g",features:[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,.1,.3,1,.3,.1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,.2,1,0,0,0],durationScalar:[1,1,1,1,1,1,1],phonologicalRole:L.NORMAL},{label:"s",features:[0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,.3,.1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],durationScalar:[1,1,1,1,1,1,1],phonologicalRole:L.NORMAL},{label:"S",features:[0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,.1,.3,1,.3,.1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],durationScalar:[1,1,1,1,1,1,1],phonologicalRole:L.NORMAL},{label:"r",features:[0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,.5,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],durationScalar:[1,1,1,1,1,1,1],phonologicalRole:L.NORMAL},{label:"l",features:[0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,.5,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],durationScalar:[1,1,1,1,1,1,1],phonologicalRole:L.NORMAL},{label:"a",features:[1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,.1,.3,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],durationScalar:[1,1,1,1,1,1,1],phonologicalRole:L.NORMAL},{label:"i",features:[1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,.3,.1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],durationScalar:[1,1,1,1,1,1,1],phonologicalRole:L.NORMAL},{label:"u",features:[1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,.1,.3,1,.3,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],durationScalar:[1,1,1,1,1,1,1],phonologicalRole:L.NORMAL},{label:"^",features:[0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,.1,.3,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],durationScalar:[1,1,1,1,1,1,1],phonologicalRole:L.NORMAL},{label:"-",features:[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1],durationScalar:[1,1,1,1,1,1,1],phonologicalRole:L.NORMAL}],lexicon:[{phon:"^",freq:23248,prime:0},{phon:"^br^pt",freq:37,prime:0},{phon:"^dapt",freq:71,prime:0},{phon:"^d^lt",freq:50,prime:0},{phon:"^gri",freq:264,prime:0},{phon:"^lat",freq:50,prime:0},{phon:"^part",freq:57,prime:0},{phon:"^pil",freq:108,prime:0},{phon:"ark",freq:50,prime:0},{phon:"ar",freq:4406,prime:0},{phon:"art",freq:274,prime:0},{phon:"art^st",freq:112,prime:0},{phon:"^slip",freq:29,prime:0},{phon:"bar",freq:125,prime:0},{phon:"bark",freq:125,prime:0},{phon:"bi",freq:6382,prime:0},{phon:"bit",freq:87,prime:0},{phon:"bist",freq:50,prime:0},{phon:"blak",freq:118,prime:0},{phon:"bl^d",freq:122,prime:0},{phon:"blu",freq:143,prime:0},{phon:"bab",freq:45,prime:0},{phon:"babi",freq:23,prime:0},{phon:"badi",freq:341,prime:0},{phon:"bust",freq:23,prime:0},{phon:"but",freq:34,prime:0},{phon:"bat^l",freq:95,prime:0},{phon:"baks",freq:87,prime:0},{phon:"brid",freq:25,prime:0},{phon:"brud",freq:26,prime:0},{phon:"br^S",freq:77,prime:0},{phon:"b^b^l",freq:32,prime:0},{phon:"b^k",freq:31,prime:0},{phon:"b^s",freq:34,prime:0},{phon:"b^t",freq:4382,prime:0},{phon:"kar",freq:386,prime:0},{phon:"kard",freq:62,prime:0},{phon:"karp^t",freq:22,prime:0},{phon:"sis",freq:34,prime:0},{phon:"klak",freq:30,prime:0},{phon:"kl^b",freq:171,prime:0},{phon:"klu",freq:25,prime:0},{phon:"kalig",freq:32,prime:0},{phon:"kul",freq:149,prime:0},{phon:"kap",freq:32,prime:0},{phon:"kapi",freq:61,prime:0},{phon:"k^p^l",freq:164,prime:0},{phon:"krip",freq:23,prime:0},{phon:"kru",freq:38,prime:0},{phon:"krap",freq:44,prime:0},{phon:"kruS^l",freq:31,prime:0},{phon:"kru^l",freq:20,prime:0},{phon:"kr^S",freq:23,prime:0},{phon:"k^p",freq:63,prime:0},{phon:"k^t",freq:223,prime:0},{phon:"dark",freq:234,prime:0},{phon:"dart",freq:20,prime:0},{phon:"dil",freq:157,prime:0},{phon:"did",freq:21,prime:0},{phon:"dip",freq:199,prime:0},{phon:"du",freq:1366,prime:0},{phon:"dal",freq:23,prime:0},{phon:"dat",freq:28,prime:0},{phon:"d^b^l",freq:83,prime:0},{phon:"dru",freq:69,prime:0},{phon:"drap",freq:196,prime:0},{phon:"dr^g",freq:58,prime:0},{phon:"d^k",freq:21,prime:0},{phon:"d^l",freq:36,prime:0},{phon:"d^st",freq:78,prime:0},{phon:"duti",freq:95,prime:0},{phon:"ist",freq:183,prime:0},{phon:"it",freq:300,prime:0},{phon:"glu",freq:28,prime:0},{phon:"gad",freq:332,prime:0},{phon:"gat",freq:482,prime:0},{phon:"grik",freq:66,prime:0},{phon:"grit",freq:38,prime:0},{phon:"gru",freq:64,prime:0},{phon:"grup",freq:545,prime:0},{phon:"gard",freq:82,prime:0},{phon:"g^tar",freq:24,prime:0},{phon:"kip",freq:348,prime:0},{phon:"ki",freq:125,prime:0},{phon:"lid",freq:517,prime:0},{phon:"lig",freq:83,prime:0},{phon:"lip",freq:38,prime:0},{phon:"list",freq:343,prime:0},{phon:"lig^l",freq:77,prime:0},{phon:"labi",freq:22,prime:0},{phon:"lak",freq:109,prime:0},{phon:"lup",freq:23,prime:0},{phon:"lus",freq:68,prime:0},{phon:"lat",freq:169,prime:0},{phon:"l^k",freq:49,prime:0},{phon:"l^ki",freq:25,prime:0},{phon:"l^kS^ri",freq:24,prime:0},{phon:"ad",freq:53,prime:0},{phon:"pap^",freq:40,prime:0},{phon:"park",freq:242,prime:0},{phon:"part",freq:625,prime:0},{phon:"parS^l",freq:25,prime:0},{phon:"partli",freq:49,prime:0},{phon:"parti",freq:275,prime:0},{phon:"par",freq:10,prime:0},{phon:"pi",freq:24,prime:0},{phon:"pik",freq:24,prime:0},{phon:"pip^l",freq:887,prime:0},{phon:"pis",freq:221,prime:0},{phon:"plat",freq:57,prime:0},{phon:"pl^g",freq:28,prime:0},{phon:"pl^s",freq:72,prime:0},{phon:"pak^t",freq:64,prime:0},{phon:"p^lis",freq:159,prime:0},{phon:"pal^si",freq:290,prime:0},{phon:"pul",freq:129,prime:0},{phon:"pap",freq:31,prime:0},{phon:"pas^b^l",freq:373,prime:0},{phon:"pas^bli",freq:61,prime:0},{phon:"pat",freq:37,prime:0},{phon:"prist",freq:33,prime:0},{phon:"prab^b^l",freq:24,prime:0},{phon:"prab^bli",freq:261,prime:0},{phon:"pradus",freq:256,prime:0},{phon:"prad^kt",freq:195,prime:0},{phon:"pragr^s",freq:141,prime:0},{phon:"p^t",freq:63,prime:0},{phon:"rid",freq:273,prime:0},{phon:"ril",freq:261,prime:0},{phon:"rili",freq:275,prime:0},{phon:"rab",freq:40,prime:0},{phon:"rak",freq:121,prime:0},{phon:"rak^t",freq:20,prime:0},{phon:"rad",freq:29,prime:0},{phon:"rut",freq:69,prime:0},{phon:"r^b",freq:35,prime:0},{phon:"r^g^d",freq:20,prime:0},{phon:"rul",freq:215,prime:0},{phon:"rupi",freq:20,prime:0},{phon:"r^S",freq:60,prime:0},{phon:"r^s^l",freq:21,prime:0},{phon:"skar",freq:22,prime:0},{phon:"skul",freq:694,prime:0},{phon:"skru",freq:45,prime:0},{phon:"sil",freq:40,prime:0},{phon:"sit",freq:99,prime:0},{phon:"sikr^t",freq:105,prime:0},{phon:"si",freq:809,prime:0},{phon:"sid",freq:84,prime:0},{phon:"sik",freq:128,prime:0},{phon:"Sarp",freq:115,prime:0},{phon:"Si",freq:2860,prime:0},{phon:"Sip",freq:23,prime:0},{phon:"Sit",freq:77,prime:0},{phon:"Sild",freq:21,prime:0},{phon:"Sak",freq:66,prime:0},{phon:"Sut",freq:81,prime:0},{phon:"Sap",freq:108,prime:0},{phon:"Sat",freq:142,prime:0},{phon:"Sr^g",freq:22,prime:0},{phon:"S^t",freq:50,prime:0},{phon:"slip",freq:109,prime:0},{phon:"slit",freq:10,prime:0},{phon:"sl^g",freq:24,prime:0},{phon:"sal^d",freq:90,prime:0},{phon:"sari",freq:49,prime:0},{phon:"spark",freq:20,prime:0},{phon:"spik",freq:259,prime:0},{phon:"spid",freq:104,prime:0},{phon:"spat",freq:110,prime:0},{phon:"star",freq:58,prime:0},{phon:"start",freq:450,prime:0},{phon:"start^l",freq:22,prime:0},{phon:"stil",freq:51,prime:0},{phon:"stip",freq:22,prime:0},{phon:"stak",freq:165,prime:0},{phon:"stap",freq:273,prime:0},{phon:"strik",freq:20,prime:0},{phon:"strit",freq:307,prime:0},{phon:"str^k",freq:59,prime:0},{phon:"str^g^l",freq:93,prime:0},{phon:"st^did",freq:79,prime:0},{phon:"st^di",freq:391,prime:0},{phon:"stup^d",freq:25,prime:0},{phon:"s^bst^tut",freq:46,prime:0},{phon:"s^t^l",freq:26,prime:0},{phon:"s^ksid",freq:62,prime:0},{phon:"s^k",freq:20,prime:0},{phon:"su",freq:39,prime:0},{phon:"sut",freq:73,prime:0},{phon:"sut^b^l",freq:37,prime:0},{phon:"tar",freq:20,prime:0},{phon:"targ^t",freq:67,prime:0},{phon:"ti",freq:29,prime:0},{phon:"tu",freq:26162,prime:0},{phon:"tul",freq:79,prime:0},{phon:"tap",freq:212,prime:0},{phon:"trit",freq:127,prime:0},{phon:"triti",freq:24,prime:0},{phon:"tri",freq:161,prime:0},{phon:"trup",freq:82,prime:0},{phon:"trat",freq:20,prime:0},{phon:"tr^b^l",freq:189,prime:0},{phon:"tr^k",freq:84,prime:0},{phon:"tru",freq:237,prime:0},{phon:"truli",freq:237,prime:0},{phon:"tr^st",freq:76,prime:0},{phon:"tr^sti",freq:35,prime:0},{phon:"tub",freq:55,prime:0},{phon:"^gli",freq:30,prime:0},{phon:"^p",freq:1903,prime:0},{phon:"^s",freq:672,prime:0},{phon:"-",freq:1e3,prime:0}],freqNode:{RDL_rest_s:0,RDL_rest_c:1,RDL_wt_s:0,RDL_wt_c:1,RDL_post_c:0},primeNode:{RDL_rest_s:0,RDL_rest_c:1,RDL_wt_s:0,RDL_wt_c:1,RDL_post_c:0},continuumSpec:"",allophoneRelations:[]}),yt=n=>{const e=Le.parse(n);return(e.lexicon&&e.lexicon.lexeme||[]).map(i=>({phon:i.phonology,freq:+i.frequency||0,label:i.label,prime:+i.prime||0}))},Se=n=>n.trim().split(" ").map(e=>Number(e)||0),Dt=n=>{const e=Le.parse(n);return(e.phonemes&&e.phonemes.phoneme||[]).map(i=>({label:i.symbol,features:Se(i.features),durationScalar:Se(i.durationScalar),phonologicalRole:L.NORMAL}))},Ye=Q(Ae({label:le(),features:Q(ee()),durationScalar:Q(ee()),phonologicalRole:Ee([z(L.NORMAL),z(L.AMBIG),z(L.ALLOPHONE),z(L.OTHER)])})),It=n=>{const e=[];if(Ye(n,{errors:e}))return n;throw Object.assign(new Error(JSON.stringify(e)),{errors:e})},Ze=Q(Ae({phon:le(),freq:ee(),label:ve(le()),prime:ee()})),Ft=n=>{const e=[];if(Ze(n,{errors:e}))return n;throw Object.assign(new Error(JSON.stringify(e)),{errors:e})},W=(n,e)=>n.RDL_rest_s?n.RDL_rest_s*Math.log10(n.RDL_rest_c*e):0,et=(n,e,r)=>n.RDL_post_c?r*Math.log10(n.RDL_post_c+e):0,tt=n=>n.reduce((e,r)=>e+r)/n.length,D=(n,e)=>Array.from(Array(n),r=>Array(e).fill(0)),fe=(n,e,r)=>Array.from(Array(n),i=>Array.from(Array(e),t=>Array(r).fill(0))),U=n=>n.map(e=>[...e]),it=(n,e,r)=>Math.min(Math.max(n,e),r),G=(n,e)=>{let r=0,i=0;for(;r===0;)r=Math.random();for(;i===0;)i=Math.random();return Math.sqrt(-2*Math.log(r))*Math.cos(2*Math.PI*i)*e+n};class ie{constructor(e){this.config=e,this.ambiguousPhonemes=[],this.phonemes=e.phonology.map(r=>Object.assign({},r)),this.sortPhonemes()}sortPhonemes(){this.phonemes.sort((e,r)=>e.label.localeCompare(r.label));for(const[e,r]of this.phonemes.entries())r.index=e;this.ambiguousPhonemes.sort((e,r)=>e.label.localeCompare(r.label));for(const[e,r]of this.ambiguousPhonemes.entries())r.index=e}sorted(){return this.phonemes}byIndex(e){return this.phonemes[e]}byLabel(e){return this.phonemes.find(r=>r.label==e)||this.ambiguousPhonemes.find(r=>r.label==e)}spreadPhons(e,r,i,t){if(e.length!=r.length)throw new Error("spread and scale parameters have different scale");i=Math.max(i,0);let o=0;const s=f=>{for(const l of f){l.spreadOffset=0;for(let c=0;c<e.length;c++){const d=e[c]*r[c]*l.durationScalar[0];d>l.spreadOffset&&(l.spreadOffset=Math.ceil(d)),o=Math.max(Math.ceil(d),o)}}};s(this.phonemes),s(this.ambiguousPhonemes);const p=f=>{for(const l of f){l.spread=D(this.config.numFeatures*this.config.continuaPerFeature,o*4),l.norm=0;for(let c=0;c<this.config.numFeatures*this.config.continuaPerFeature;c++)if(l.features[c]>0){const d=Math.floor(c/this.config.numFeatures),S=(l.features[c]*t-l.features[c]*i)/(e[d]*l.durationScalar[0]),u=Math.floor(e[d]*l.durationScalar[0]);for(let q=0;q<u;q++)l.spread[c][l.spreadOffset+q]=l.features[c]*t-S*q,l.spread[c][l.spreadOffset-q]=l.spread[c][l.spreadOffset+q],l.norm+=2*Math.pow(l.spread[c][l.spreadOffset+q],2)}}};p(this.phonemes),p(this.ambiguousPhonemes)}makePhonemeContinuum(e,r,i){const t=this.byLabel(e),o=this.byLabel(r);if(!t||!o||i<=1||i>ie.MAX_STEPS)throw new Error("invalid arguments to makePhonemeContinuum");const s=[];for(let l=0;l<this.config.numFeatures*this.config.continuaPerFeature;l++)s[l]=(o.features[l]-t.features[l])/(i-1);const p=[];for(let l=0;l<this.config.continuaPerFeature;l++)p[l]=(o.durationScalar[l]-t.durationScalar[l])/(i-1);this.ambiguousPhonemes=[];for(let l=0;l<i;l++){const c=[];for(let S=0;S<this.config.numFeatures*this.config.continuaPerFeature;S++)c[S]=t.features[S]+l*s[S];const d=[];for(let S=0;S<this.config.continuaPerFeature;S++)d[S]=t.durationScalar[S]+l*p[S];this.ambiguousPhonemes.push({label:l.toString(),features:c,durationScalar:d,phonologicalRole:L.AMBIG})}const f=Math.floor(this.ambiguousPhonemes.length/2);this.ambiguousPhonemes.push({label:"?",features:[...this.ambiguousPhonemes[f].features],durationScalar:[...this.ambiguousPhonemes[f].durationScalar],phonologicalRole:L.AMBIG}),this.sortPhonemes()}}ie.MAX_STEPS=9;class ot{constructor(e=te()){this.globalFeatureCompetitionIndex=0,this.globalLexicalCompetitionIndex=0,this.globalPhonemeCompetitionIndex=0,this.globalPhonToWordSum=0,this.globalWordToPhonSum=0,this.globalFeatToPhonSum=0,this.globalPhonToFeatSum=0,this.globalFeatSumAll=0,this.globalFeatSumPos=0,this.globalPhonSumAll=0,this.globalPhonSumPos=0,this.globalWordSumAll=0,this.globalWordSumPos=0,this.inputSlice=0,this.__nreps=1,this.config=e,this.phonemes=new ie(this.config),this.reset()}reset(){this.lengthNormalizationScale=1/tt(this.config.lexicon.map(i=>i.phon.length)),this.inputSlice=0,this.inputLayer=D(this.config.continuaPerFeature*this.config.numFeatures,this.config.fSlices),this.featLayer=D(this.config.continuaPerFeature*this.config.numFeatures,this.config.fSlices),this.featNet=D(this.config.continuaPerFeature*this.config.numFeatures,this.config.fSlices),this.phonLayer=D(this.config.phonology.length,this.getPSlices()),this.phonNet=D(this.config.phonology.length,this.getPSlices()),this.wordLayer=D(this.config.lexicon.length,this.getPSlices()),this.wordNet=D(this.config.lexicon.length,this.getPSlices()),this.pww=D(this.config.phonology.length,4),this.wpw=D(this.config.phonology.length,4),this.fpw=fe(this.config.phonology.length,this.config.continuaPerFeature,0),this.pfw=fe(this.config.phonology.length,this.config.continuaPerFeature,0);for(let i=0;i<this.config.phonology.length;i++)for(let t=0;t<this.config.continuaPerFeature;t++)this.fpw[i][t]=Array(this.config.spread[t]*2).fill(0),this.pfw[i][t]=Array(this.config.spread[t]*2).fill(0);if(this.config.continuumSpec&&this.config.continuumSpec.trim().length==3){const i=+this.config.continuumSpec.trim()[2];i>1&&i<10&&this.phonemes.makePhonemeContinuum(this.config.continuumSpec.trim()[0],this.config.continuumSpec.trim()[1],i)}this.phonemes.spreadPhons(this.config.spread,this.config.spreadScale,this.config.min,this.config.max);let e=this.clamp(this.config.rest.F||0);for(let i=0;i<this.config.fSlices;i++)for(let t=0;t<this.config.continuaPerFeature*this.config.numFeatures;t++)this.featLayer[t][i]=e;e=this.clamp(this.config.rest.P||0);for(let i=0;i<this.getPSlices();i++)for(let t=0;t<this.config.phonology.length;t++)this.phonLayer[t][i]=e;e=this.clamp(this.config.rest.W||0);for(let i=0;i<this.getWSlices();i++)for(let t=0;t<this.config.lexicon.length;t++)this.wordLayer[t][i]=e;if(this.config.freqNode.RDL_rest_s)for(let i=0;i<this.getWSlices();i++)for(let t=0;t<this.config.lexicon.length;t++)this.wordLayer[t][i]+=W(this.config.freqNode,this.config.lexicon[t].freq);if(this.config.primeNode.RDL_rest_s)for(let i=0;i<this.getWSlices();i++)for(let t=0;t<this.config.lexicon.length;t++)this.config.lexicon[t].prime>0&&(this.wordLayer[t][i]+=W(this.config.primeNode,this.config.lexicon[t].prime));const r=4;this.__nreps=this.config.nreps,this.__nreps<=0&&(this.__nreps=1);for(let i=0;i<this.config.phonology.length;i++){let t=0;for(let o=0;o<=4;o++){const s=(r-Math.abs(2-o))/r;t+=s*s}for(let o=0;o<4;o++){const s=(r-Math.abs(2-o))/r;this.pww[i][o]=s/t,this.wpw[i][o]=1*s/t}}for(let i=0;i<this.config.phonology.length;i++)for(let t=0;t<this.config.continuaPerFeature;t++){let o=0;const s=this.config.spread[t]*1,p=Math.floor(s);for(let f=0;f<2*p;f++){const l=(s-Math.abs(p-f))/s;o+=l*l}for(let f=0;f<2*p;f++)this.pfw[i][t][f]=(s-Math.abs(p-f))/s,this.fpw[i][t][f]=this.pfw[i][t][f]/o}this.createInput()}getPSlices(){return Math.floor(this.config.fSlices/this.config.slicesPerPhon)}getWSlices(){return this.getPSlices()}clamp(e){return it(e,this.config.min,this.config.max)}createInput(){const e=this.config.modelInput.trim();let r=this.config.deltaInput;for(let i=0;i<e.length&&r<this.config.fSlices;i++)if(e[i]=="{"){const t=this.phonemes.byLabel(e[++i]),o=+e[++i],s=this.phonemes.byLabel(e[++i]);if(i+=1,!t||!s||!t.spread||!t.spreadOffset||!s.spread||!s.spreadOffset)throw new he;const p=r-t.spreadOffset;for(let f=p,l=0;f<p+o;f++,l++)for(let c=0;c<this.config.numFeatures*this.config.continuaPerFeature;c++)f>=0&&f<this.config.fSlices&&(this.inputLayer[c][f]+=t.spread[c][l]);for(let f=p+o,l=o;f<p+s.spreadOffset*2;f++,l++)for(let c=0;c<this.config.numFeatures*this.config.continuaPerFeature;c++)f>=0&&f<this.config.fSlices&&(this.inputLayer[c][f]+=s.spread[c][l]);r+=this.config.deltaInput}else{const t=this.phonemes.byLabel(e[i]);if(!t||!t.spread||!t.spreadOffset)throw new he;const o=r-Math.round(t.spreadOffset);for(let s=o,p=0;s<o+Math.round(t.spreadOffset*2);s++,p++)for(let f=0;f<this.config.numFeatures*this.config.continuaPerFeature;f++)s>=0&&s<this.config.fSlices&&(this.inputLayer[f][s]+=t.spread[f][p]);r+=Math.round(this.config.deltaInput*t.durationScalar[0])}if(this.config.noiseSD!=0)for(let i=0;i<this.config.numFeatures*this.config.continuaPerFeature;i++)for(let t=0;t<this.config.fSlices;t++)this.inputLayer[i][t]+=G(0,this.config.noiseSD);for(let i=0;i<this.config.numFeatures*this.config.continuaPerFeature;i++)for(let t=0;t<this.config.fSlices;t++)this.inputLayer[i][t]=this.clamp(this.inputLayer[i][t]);for(let i=0;i<this.config.continuaPerFeature;i++)for(let t=0;t<this.config.numFeatures;t++)this.featNet[i*this.config.numFeatures+t][0]+=this.inputLayer[i*this.config.numFeatures+t][0];this.featUpdate()}actFeatures(){this.globalFeatureCompetitionIndex=0;const e=D(this.config.continuaPerFeature,this.config.fSlices);for(let i=0;i<this.config.continuaPerFeature;i++)for(let t=0;t<this.config.numFeatures;t++)for(let o=0;o<this.config.fSlices;o++)this.featLayer[i*this.config.numFeatures+t][o]>0&&(e[i][o]+=this.featLayer[i*this.config.numFeatures+t][o]);const r=e.map(i=>i.map(t=>t*(this.config.gamma.F||0)));if(this.inputSlice<this.config.fSlices)for(let i=0;i<this.config.continuaPerFeature*this.config.numFeatures;i++)for(let t=this.inputSlice+1;t<this.config.fSlices&&t<this.inputSlice+1+this.__nreps;t++){const o=this.clamp((this.config.alpha.IF||0)*this.inputLayer[i][t]);this.featNet[i][t]+=o,this.globalFeatureCompetitionIndex-=o}for(let i=0;i<this.config.continuaPerFeature;i++)for(let t=0;t<this.config.numFeatures;t++)for(let o=0;o<this.config.fSlices;o++){const s=Math.max(0,r[i][o]-Math.max(0,this.featLayer[i*this.config.numFeatures+t][o]*(this.config.gamma.F||0)));this.featNet[i*this.config.numFeatures+t][o]-=s,this.globalFeatureCompetitionIndex+=s}}featToPhon(){const e=this.config.slicesPerPhon,r=this.getPSlices();this.globalFeatToPhonSum=0;for(let i=0;i<this.config.continuaPerFeature*this.config.numFeatures;i++)for(let t=0;t<this.config.fSlices;t++)if(this.featLayer[i][t]>0)for(const[o,s]of this.phonemes.sorted().entries()){if(s.features[i]==0)continue;const p=this.config.spread[Math.floor(i/this.config.numFeatures)],f=this.config.fSlices-p;let l,c;t<p?(l=0,c=Math.floor((t+p-1)/e)):(t>f?c=r-1:c=Math.floor((t+p-1)/e),l=Math.floor((t-p)/e+1));let d=p-(t-e*l),S=0;this.featLayer[i][t]>0&&(S=s.features[i]*this.featLayer[i][t]*(this.config.alpha.FP||0));const u=Math.floor(i/this.config.numFeatures);for(let q=l;q<c+1&&q<r;q++){const b=this.fpw[o][u][d]*S;this.phonNet[o][q]+=b,this.globalFeatToPhonSum+=b,d+=e}}}phonToPhon(){const e=this.getPSlices();let r=Array(e).fill(0),i=0,t=0,o=1;for(let s=0;s<e;s++)for(let p=0;p<this.config.phonology.length;p++)if(this.phonLayer[p][s]>0){i=s+o,i>=e?(i=e-1,t=s-o):(t=s-o,t<0&&(t=0));for(let f=t;f<i;f++)r[f]+=this.phonLayer[p][s]*(this.config.gamma.P||0)}this.globalPhonemeCompetitionIndex=0;for(let s=0;s<this.config.phonology.length;s++)for(let p=0;p<e;p++){i=p+o,i>=e?(i=e-1,t=p-o):(t=p-o,t<0&&(t=0));for(let f=t;f<i;f++)r[f]>0&&(this.phonNet[s][p]-=r[f],this.globalPhonemeCompetitionIndex+=r[f]);if(this.phonLayer[s][p]*(this.config.gamma.P||0)>0&&r[p]>0){const f=(i-t)*this.phonLayer[s][p]*(this.config.gamma.P||0);this.phonNet[s][p]+=f,this.globalPhonemeCompetitionIndex-=f}for(let f=0;f<this.config.phonology.length;f++);}}phonToFeat(){var e;const r=this.config.fSlices,i=this.config.slicesPerPhon;this.globalPhonToFeatSum=0;for(let t=0;t<r;t++)for(let o=0;o<this.config.continuaPerFeature;o++)for(let s=0;s<this.config.numFeatures;s++){let p=0;for(let l=0;l<this.config.phonology.length;l++)for(let c=0;c<this.getPSlices();c++){let d=Math.floor(Math.abs(c*i-t));d>=r&&(d=r-1),this.phonLayer[l][c]>0&&(p+=this.pfw[l][o][d]*this.phonLayer[l][c]*(((e=this.phonemes.byIndex(l))===null||e===void 0?void 0:e.features[o*this.config.numFeatures+s])||0))}const f=(this.config.alpha.PF||0)*p;this.featNet[o*this.config.numFeatures+s][t]+=f,this.globalPhonToFeatSum+=f}}wordToPhon(){let e=this.config.lexicon,r,i,t,o,s;const p=this.getPSlices();this.globalWordToPhonSum=0;for(let f=0;f<e.length;f++)for(let l=0;l<this.getWSlices();l++)if(!(this.wordLayer[f][l]<=0)){r=e[f].phon;for(let c=0;c<r.length;c++){let d=this.phonemes.byLabel(r[c]);if(i=l+c*2,t=i-1,t>=p)break;t<0?(o=1-t,t=0,s=i+2):(s=i+2,s>p-1&&(s=p-1),o=1);for(let S=t;S<s&&S<p&&o<4;S++,o++)if(this.wordLayer[f][l]>0){let u=0;e[f].freq&&this.config.freqNode.RDL_wt_s&&(u=this.config.freqNode.RDL_wt_s*Math.log10(e[f].freq));let q=0;e[f].prime&&this.config.primeNode.RDL_wt_s&&(q=this.config.primeNode.RDL_wt_s*Math.log10(e[f].prime));const b=(1+u+q)*this.wordLayer[f][l]*(this.config.alpha.WP||0)*this.wpw[d.index][o];this.phonNet[d.index][S]+=b,this.globalWordToPhonSum+=b}}}}phonToWord(){const e=this.config.lexicon,r=this.getPSlices();let i,t,o,s,p,f;this.globalPhonToWordSum=0;for(let l=0;l<this.config.phonology.length;l++){p=2,(this.config.deltaInput!=6||this.config.slicesPerPhon!=3)&&(p=Math.floor(this.config.deltaInput/this.config.slicesPerPhon));for(let c=0;c<r;c++){if(this.phonLayer[l][c]<=0)continue;e:for(let d=0;d<e.length;d++){const S=e[d].phon;f=S.length;for(let u=0;u<f;u++)if(S.charAt(u)==this.phonemes.byIndex(l).label.charAt(0)){if(i=c-p*u,i<-p)continue e;t=1+i-p,t<0?(o=1-t,t=0,s=i+p):(s=i+p,s>r-1&&(s=r-1),o=1);let q=2*this.phonLayer[l][c]*(this.config.alpha.PW||0),b=0;this.config.freqNode.RDL_wt_s&&e[d].freq&&(b=this.config.freqNode.RDL_wt_s*Math.log10(e[d].freq));let _=0;this.config.primeNode.RDL_wt_s&&e[d].prime&&(_=this.config.primeNode.RDL_wt_s*Math.log10(e[d].prime));for(let A=t;A<s&&A<this.getWSlices();A++,o++)if(o>=0&&o<4){const I=(1+b+_)*this.pww[l][o]*q;this.wordNet[d][A]+=I,this.globalPhonToWordSum+=I}}}}}}wordToWord(){const e=this.getPSlices(),r=Array(e).fill(0),i=Array(e).fill(0),t=this.config.lexicon;for(let o=0;o<e;o++)for(let s=0;s<t.length;s++){let p=o;p<0&&(p=0);let f=o+t[s].phon.length*2;//!! wstart + (wlength*phone width) + (1/2 phone width)
f>e&&(f=e-1);for(let l=p;l<f;l++)this.wordLayer[s][o]>0&&(i[l]+=this.wordLayer[s][o]*this.wordLayer[s][o])}for(let o=0;o<e;o++)i[o]>3&&(i[o]=3),r[o]=i[o]*(this.config.gamma.W||0);this.globalLexicalCompetitionIndex=0;for(let o=0;o<e;o++)for(let s=0;s<t.length;s++){let p=o;p<0&&(p=0);let f=o+t[s].phon.length*2;//!! wstart + (wlength*phone width) + (1/2 phone width)
f>e&&(f=e-1);for(let l=p;l<f;l++)if(this.config.lengthNormalization){let c=1/(t[s].phon.length*this.lengthNormalizationScale);c>1&&(c=1);const d=r[l]*c;this.wordNet[s][o]-=d,this.globalLexicalCompetitionIndex+=d}else this.wordNet[s][o]-=r[l],this.globalLexicalCompetitionIndex+=r[l];if(this.wordLayer[s][o]>0)if(this.config.lengthNormalization){let l=1/(t[s].phon.length*this.lengthNormalizationScale);l>1&&(l=1);const c=(f-p)*(this.wordLayer[s][o]*this.wordLayer[s][o]*(this.config.gamma.W||0))*l;this.wordNet[s][o]+=c,this.globalLexicalCompetitionIndex-=c}else{const l=(f-p)*(this.wordLayer[s][o]*this.wordLayer[s][o]*(this.config.gamma.W||0));this.wordNet[s][o]+=l,this.globalLexicalCompetitionIndex-=l}}}featUpdate(){const{min:e,max:r}=this.config;this.globalFeatSumAll=0,this.globalFeatSumPos=0;for(let i=0;i<this.config.fSlices;i++)for(let t=0;t<this.config.numFeatures*this.config.continuaPerFeature;t++){this.config.stochasticitySD&&(this.featNet[t][i]+=G(0,this.config.stochasticitySD));let o=this.featLayer[t][i];this.featNet[t][i]>0?o+=(r-o)*this.featNet[t][i]:this.featNet[t][i]<0&&(o+=(o-e)*this.featNet[t][i]);let s=this.featLayer[t][i]-(this.config.rest.F||0);o-=(this.config.decay.F||0)*s,o>r&&(o=r),o<e&&(o=e),this.featLayer[t][i]=o,this.globalFeatSumAll+=o,o>0&&(this.globalFeatSumPos+=o)}this.featNet=D(this.config.numFeatures*this.config.continuaPerFeature,this.config.fSlices)}phonUpdate(){const e=this.getPSlices();this.globalPhonSumAll=0,this.globalPhonSumPos=0;for(let r=0;r<e;r++)for(let i=0;i<this.config.phonology.length;i++){this.config.stochasticitySD&&(this.phonNet[i][r]+=G(0,this.config.stochasticitySD));let t;this.phonNet[i][r]>=0?t=this.config.max-this.phonLayer[i][r]:t=this.phonLayer[i][r]-this.config.min;const o=this.phonLayer[i][r]-(this.config.rest.P||0);this.phonLayer[i][r]+=t*this.phonNet[i][r]-(this.config.decay.P||0)*o,this.phonLayer[i][r]=this.clamp(this.phonLayer[i][r]),this.globalPhonSumAll+=this.phonLayer[i][r],this.phonLayer[i][r]>0&&(this.globalPhonSumPos+=this.phonLayer[i][r])}this.phonNet=D(this.config.phonology.length,e)}wordUpdate(){const e=this.getWSlices(),{min:r,max:i}=this.config;this.globalWordSumAll=0,this.globalWordSumPos=0;for(let t=0;t<this.config.lexicon.length;t++)for(let o=0;o<e;o++){this.wordNet[t][o]*=this.config.atten,this.wordNet[t][o]-=this.config.bias,this.config.stochasticitySD&&(this.wordNet[t][o]+=G(0,this.config.stochasticitySD));let s=this.wordLayer[t][o];this.wordNet[t][o]>0?s+=(i-s)*this.wordNet[t][o]:this.wordNet[t][o]<0&&(s+=(s-r)*this.wordNet[t][o]);let p;this.config.freqNode.RDL_rest_s&&this.config.lexicon[t].freq>0&&this.config.primeNode.RDL_rest_s&&this.config.lexicon[t].prime>0?p=this.wordLayer[t][o]-((this.config.rest.W||0)+W(this.config.freqNode,this.config.lexicon[t].freq))+((this.config.rest.W||0)+W(this.config.primeNode,this.config.lexicon[t].prime)):this.config.freqNode.RDL_rest_s&&this.config.lexicon[t].freq>0?p=this.wordLayer[t][o]-((this.config.rest.W||0)+W(this.config.freqNode,this.config.lexicon[t].freq)):this.config.primeNode.RDL_rest_s&&this.config.lexicon[t].prime>0?p=this.wordLayer[t][o]-((this.config.rest.W||0)+W(this.config.primeNode,this.config.lexicon[t].prime)):p=this.wordLayer[t][o]-(this.config.rest.W||0),s-=(this.config.decay.W||0)*p,s>i&&(s=i),s<r&&(s=r),this.wordLayer[t][o]=s,this.globalWordSumAll+=s,s>0&&(this.globalWordSumPos+=s)}this.wordNet=D(this.config.lexicon.length,e)}cycle(){this.actFeatures();const e=this.config.nreps<0?Math.abs(this.config.nreps):1;for(let r=0;r<e;r++)this.featToPhon(),this.phonToPhon(),this.phonToWord(),this.wordToPhon(),this.wordToWord(),this.featUpdate(),this.phonUpdate(),this.wordUpdate();this.inputSlice+=this.__nreps}}class rt{constructor(e=te()){this.config=e,this.inputLayer=[],this.featLayer=[],this.phonLayer=[],this.wordLayer=[],this.globalFeatureCompetition=[],this.globalLexicalCompetition=[],this.globalPhonemeCompetition=[],this.globalPhonToWordSum=[],this.globalWordToPhonSum=[],this.globalFeatToPhonSum=[],this.globalPhonToFeatSum=[],this.globalFeatSumAll=[],this.globalFeatSumPos=[],this.globalPhonSumAll=[],this.globalPhonSumPos=[],this.globalWordSumAll=[],this.globalWordSumPos=[],this.tn=new ot(this.config),this.phonemes=this.tn.phonemes,this.maxDuration=Math.max(6*this.config.modelInput.length*this.config.deltaInput,this.config.fSlices)}getStepsRun(){return this.inputLayer.length}cycle(e){e=Math.min(this.maxDuration,e);for(let r=0;r<e;r++)this.inputLayer.push(U(this.tn.inputLayer)),this.featLayer.push(U(this.tn.featLayer)),this.phonLayer.push(U(this.tn.phonLayer)),this.wordLayer.push(U(this.tn.wordLayer)),this.globalFeatureCompetition.push(this.tn.globalFeatureCompetitionIndex),this.globalLexicalCompetition.push(this.tn.globalLexicalCompetitionIndex),this.globalPhonemeCompetition.push(this.tn.globalPhonemeCompetitionIndex),this.globalPhonToWordSum.push(this.tn.globalPhonToWordSum),this.globalWordToPhonSum.push(this.tn.globalWordToPhonSum),this.globalFeatToPhonSum.push(this.tn.globalFeatToPhonSum),this.globalPhonToFeatSum.push(this.tn.globalPhonToFeatSum),this.globalFeatSumAll.push(this.tn.globalFeatSumAll),this.globalFeatSumPos.push(this.tn.globalFeatSumPos),this.globalPhonSumAll.push(this.tn.globalPhonSumAll),this.globalPhonSumPos.push(this.tn.globalPhonSumPos),this.globalWordSumAll.push(this.tn.globalWordSumAll),this.globalWordSumPos.push(this.tn.globalWordSumPos),this.tn.cycle()}getInputData(e){return this.inputLayer[e].map((r,i)=>[i,...r.map(t=>t.toFixed(4))])}getFeatureData(e){return this.featLayer[e].map((r,i)=>[i,...r.map(t=>t.toFixed(4))])}getPhonemeData(e){return this.phonLayer[e].map((r,i)=>{var t;return[this.phonemes&&((t=this.phonemes.byIndex(i))===null||t===void 0?void 0:t.label)||"?",...r.map(o=>o.toFixed(4))]})}getWordData(e){return this.wordLayer[e].map((r,i)=>[this.config.lexicon[i].phon,...r.map(t=>t.toFixed(4))])}getLevelsAndFlowData(e){return[[this.globalFeatSumAll[e],this.globalFeatSumPos[e],this.globalFeatureCompetition[e],this.globalPhonSumAll[e],this.globalPhonSumPos[e],this.globalPhonemeCompetition[e],this.globalWordSumAll[e],this.globalWordSumPos[e],this.globalLexicalCompetition[e],this.globalFeatToPhonSum[e],this.globalPhonToFeatSum[e],this.globalPhonToWordSum[e],this.globalWordToPhonSum[e]]]}getAllInputData(){return Array.from({length:this.inputLayer.length},(e,r)=>this.getInputData(r))}getAllFeatureData(){return Array.from({length:this.featLayer.length},(e,r)=>this.getFeatureData(r))}getAllPhonemeData(){return Array.from({length:this.phonLayer.length},(e,r)=>this.getPhonemeData(r))}getAllWordData(){return Array.from({length:this.wordLayer.length},(e,r)=>this.getWordData(r))}getAllLevelsAndFlowData(){return Array.from({length:this.globalLexicalCompetition.length},(e,r)=>this.getLevelsAndFlowData(r))}serializeInputData(e=[]){const r=[this.config.modelInput,...e];return $(this.getAllInputData(),r)}serializeFeatureData(e=[]){const r=[this.config.modelInput,...e];return $(this.getAllFeatureData(),r)}serializePhonemeData(e=[]){const r=[this.config.modelInput,...e];return $(this.getAllPhonemeData(),r)}serializeWordData(e=[]){const r=[this.config.modelInput,...e];return $(this.getAllWordData(),r)}serializeLevelsAndFlowData(e=[]){const r=[this.config.modelInput,...e];return $(this.getAllLevelsAndFlowData(),r)}getSimData(){return{input:this.getAllInputData(),feature:this.getAllFeatureData(),phoneme:this.getAllPhonemeData(),word:this.getAllWordData(),levelsAndFlows:this.getAllLevelsAndFlowData()}}}function $(n,e){var r;const i=((r=n[0])===null||r===void 0?void 0:r.length)||0,t=[];for(let o=0;o<i;o++)for(let s=0;s<n.length;s++)t.push([s,...n[s][o]]);return t.map(o=>[o[0],...e,o.slice(1)].join(", ")).join(`
`)+`
`}class nt extends rt{writeFiles(){}async appendInputData(){}async appendFeatureData(){}async appendPhonemeData(){}async appendWordData(){}async appendLevelsAndFlowData(){}async appendFiles(){}}var w;(function(n){n[n.PHONEMES=0]="PHONEMES",n[n.WORDS=1]="WORDS"})(w||(w={}));var N;(function(n){n[n.RESPONSE_PROBABILITIES=0]="RESPONSE_PROBABILITIES",n[n.ACTIVATIONS=1]="ACTIVATIONS",n[n.COMPETITION_INDEX=2]="COMPETITION_INDEX"})(N||(N={}));var P;(function(n){n[n.AVERAGE=0]="AVERAGE",n[n.MAX_POSTHOC=1]="MAX_POSTHOC",n[n.STATIC=2]="STATIC",n[n.FRAUENFELDER=3]="FRAUENFELDER",n[n.MAX_ADHOC=4]="MAX_ADHOC",n[n.MAX_ADHOC_2=5]="MAX_ADHOC_2"})(P||(P={}));var H;(function(n){n[n.NORMAL=0]="NORMAL",n[n.FORCED=1]="FORCED"})(H||(H={}));var T;(function(n){n[n.RAW=0]="RAW",n[n.FIRST_DERIVATIVE=1]="FIRST_DERIVATIVE",n[n.SECOND_DERIVATIVE=2]="SECOND_DERIVATIVE"})(T||(T={}));const be=(n,e)=>{const r=[];for(const i of n)for(let t=0;t<e.length;t++)i==e[t]&&r.push(t);return r},J=(n,e,r)=>{let i=0,t=0;for(let o=e-Math.floor(r/2);o<e+Math.floor(r/2);o++)if(!(o<0)){if(o>=n.length)break;i+=n[o],t++}return i/=t,i},st=n=>{let e=[];for(let r=1;r<=n+1;r++)e[r-1]=r;return e},ae=(n,e,r)=>{const i=[],t=st(r);for(let o=0;o<r-1;o++){let s=0,p=0,f;for(let l=Math.floor(-e/2);l<e/2&&l<n.length;l++)if(f=o+l,!(f<0)){if(f>=t.length)break;s+=(t[f]-J(t,o,e))*(n[f]-J(n,o,e)),p+=(t[f]-J(t,o,e))*(t[f]-J(t,o,e))}i[o]=s/p}return i},at=n=>{const e=n.domain==w.WORDS?n.sim.config.lexicon.map(t=>t.phon):n.sim.phonemes.sorted().map(t=>t.label),r=n.excludeSilence?e.filter(t=>!/^-+$/.test(t)):e;return ye(Object.assign(Object.assign({},n),{itemsToWatch:e})).map((t,o)=>[t,r[o]]).sort(([t],[o])=>Math.max(...o.data.map(s=>s.y))-Math.max(...t.data.map(s=>s.y))).slice(0,+n.itemsToWatch).map(([t,o])=>o)},ye=n=>{const{sim:e,domain:r=w.WORDS,itemsToWatch:i=10,calculationType:t=P.STATIC,alignment:o=4,choice:s=H.NORMAL,kValue:p=4,competType:f=T.RAW,competSlope:l=1}=n;let c;p<0?c=N.COMPETITION_INDEX:p===0?c=N.ACTIVATIONS:c=N.RESPONSE_PROBABILITIES;const d=e.getStepsRun();if(d==0)return[];if(c==N.RESPONSE_PROBABILITIES||c==N.ACTIVATIONS){let S;if(Array.isArray(i)?S=i:S=at(n),S.length==0)return[];let u,q;r==w.WORDS?(u=be(S,e.config.lexicon.map(h=>h.phon)),q=e.wordLayer):(u=be(S,e.phonemes.sorted().map(h=>h.label)),q=e.phonLayer);let b=q[0].length,_=Math.floor(e.config.fSlices/e.config.slicesPerPhon),A=fe(d,b,_);if(c==N.RESPONSE_PROBABILITIES)for(let h=0;h<d;h++)for(let a=0;a<b;a++)for(let m=0;m<_;m++){const g=q[h][a][m];A[h][a][m]=Math.exp(g*(p||1)),e.config.freqNode.RDL_post_c&&r==w.WORDS&&(A[h][a][m]=et(e.config.freqNode,e.config.lexicon[a].freq,A[h][a][m]))}const I=D(b,d),B=Array(b).fill(0);if(t==P.MAX_ADHOC)for(let h=0;h<b;h++)for(let a=0;a<d;a++){let m=-1e3;for(let g=0;g<_;g++)q[a][h][g]>m&&(m=q[a][h][g],I[h][a]=g)}else if(t==P.MAX_ADHOC_2)for(let h=0;h<b;h++)for(let a=0;a<d;a++){let m=-1e3;for(let g=0;g<_;g++)q[a][h][g]>m&&(m=q[a][h][g],I[h][a]=g)}else if(t==P.MAX_POSTHOC)for(let h=0;h<b;h++){let a=-1e3;for(let m=0;m<d;m++)for(let g=0;g<_;g++)q[m][h][g]>a&&(a=q[m][h][g],B[h]=g)}let R=Array(d).fill(0),O=D(d,b);if(c==N.RESPONSE_PROBABILITIES){for(let h=0;h<d;h++)if(R[h]=0,s==H.NORMAL)switch(t){case P.AVERAGE:for(let a=0;a<_;a++)for(let m=0;m<b;m++)R[h]+=A[h][m][a];break;case P.MAX_ADHOC:for(let a=0;a<b;a++)for(let m=0;m<b;m++)O[h][m]+=A[h][a][I[m][h]];break;case P.MAX_ADHOC_2:for(let a=0;a<b;a++)for(let m=0;m<b;m++)O[h][m]+=A[h][a][I[a][h]];break;case P.MAX_POSTHOC:for(let a=0;a<b;a++)R[h]+=A[h][a][B[a]];break;case P.STATIC:for(let a=0;a<b;a++)R[h]+=A[h][a][o];break;case P.FRAUENFELDER:for(let a=0;a<b;a++)for(let m=0;m<b;m++)for(let g=0;g<_;g++)if(r==w.WORDS){const x=Math.floor(e.config.deltaInput/e.config.slicesPerPhon)*e.config.lexicon[a].phon.length,X=Math.floor(e.config.deltaInput/e.config.slicesPerPhon)*e.config.lexicon[m].phon.length;(o==g||g>o&&o+x>=g||g<o&&g+X>=o)&&(O[h][a]+=A[h][m][g])}else(g==o||g==o-1||g==o+1)&&(O[h][a]+=A[h][a][g]);break}else if(s==H.FORCED)switch(t){case P.AVERAGE:for(let a=0;a<_;a++)for(let m=0;m<u.length;m++)R[h]+=A[h][u[m]][a];break;case P.MAX_ADHOC:for(let a=0;a<u.length;a++)for(let m=0;m<u.length;m++)O[h][u[a]]+=A[h][u[m]][I[u[a]][h]];break;case P.MAX_ADHOC_2:for(let a=0;a<u.length;a++)for(let m=0;m<u.length;m++)O[h][u[a]]+=A[h][u[m]][I[u[a]][h]];break;case P.MAX_POSTHOC:for(let a=0;a<u.length;a++)R[h]+=A[h][u[a]][B[u[a]]];break;case P.STATIC:for(let a=0;a<u.length;a++)R[h]+=A[h][u[a]][o];break;case P.FRAUENFELDER:for(let a=0;a<u.length;a++)for(let m=0;m<u.length;m++)for(let g=0;g<_;g++)if(r==w.WORDS){const x=Math.floor(e.config.deltaInput/e.config.slicesPerPhon)*e.config.lexicon[u[a]].phon.length,X=Math.floor(e.config.deltaInput/e.config.slicesPerPhon)*e.config.lexicon[u[m]].phon.length;(o<=g+X&&o>=g&&X>0&&x>0||g<=o+x&&g>=o&&X>0&&x>0)&&(O[h][u[a]]+=A[h][u[m]][g])}else(g==o||g==o-1||g==o+1)&&(O[h][u[a]]+=A[h][u[m]][g]);break}}let C=D(u.length,d);for(let h=0;h<u.length;h++)for(let a=0;a<d;a++){let m=0,g;switch(c==N.RESPONSE_PROBABILITIES?g=A:g=q,t){case P.AVERAGE:for(let x=0;x<_;x++)m+=g[a][u[h]][x];m/=_;break;case P.MAX_ADHOC:m=g[a][u[h]][I[u[h]][a]];break;case P.MAX_ADHOC_2:m=g[a][u[h]][I[u[h]][a]];break;case P.MAX_POSTHOC:m=g[a][u[h]][B[u[h]]];break;case P.STATIC:m=g[a][u[h]][o];break;case P.FRAUENFELDER:m=g[a][u[h]][o]+g[a][u[h]][o+1];break}if(c==N.RESPONSE_PROBABILITIES)switch(t){case P.AVERAGE:C[h][a]=m/R[a];break;case P.MAX_ADHOC:C[h][a]=m/O[a][u[h]];break;case P.MAX_ADHOC_2:C[h][a]=m/O[a][u[h]];break;case P.MAX_POSTHOC:C[h][a]=m/R[a];break;case P.STATIC:C[h][a]=m/R[a];break;case P.FRAUENFELDER:C[h][a]=m/O[a][u[h]];break}else C[h][a]=m}let k;const pe=[];for(let h=0;h<u.length;h++){r==w.WORDS?k={label:e.config.lexicon[u[h]].phon,data:[]}:k={label:e.phonemes.sorted()[u[h]].label,data:[]};for(let a=0;a<d;a++)k.data.push({x:a,y:C[h][a]});switch(t){case P.MAX_ADHOC:case P.MAX_ADHOC_2:k.label+=` [${I[u[h]].join(",")}]`;break;case P.MAX_POSTHOC:k.label+=` [${B[u[h]]}]`;break;case P.STATIC:case P.FRAUENFELDER:k.label+=` [${o}]`;break}pe.push(k)}return pe}else{let S;const u=[];let q;if(r==w.WORDS?(q=e.globalLexicalCompetition,S={label:"Lexical Competition",data:[]}):(q=e.globalPhonemeCompetition,S={label:"Phoneme Competition",data:[]}),f==T.RAW){for(let b=0;b<d;b++)S.data.push({x:b,y:q[b]});u.push(S)}else if(f==T.FIRST_DERIVATIVE){const b=ae(q,l,d);for(let _=0;_<b.length;_++)S.data.push({x:_,y:b[_]});u.push(S)}else if(f==T.SECOND_DERIVATIVE){const b=ae(q,l,d-1),_=ae(b,l,d-2);for(let A=0;A<_.length;A++)S.data.push({x:A,y:_[A]});u.push(S)}return u}};function lt(n,e=!1){return n.length>0?[["cycle",...n.map(r=>e?r.label.padEnd(18):r.label)],...Array.from(Array(n[0].data.length),(r,i)=>[i,...n.map(t=>{var o;return((o=t.data[i].y)===null||o===void 0?void 0:o.toFixed(18))||NaN})])]:[]}function ht(n,e=!1){return lt(n,e).map(r=>r.join("	")).join(`
`)}const j=n=>n?n.map(e=>e.join("	")).join(`
`):"",ft=["#e6194b","#3cb44b","#ffe119","#4363d8","#f58231","#911eb4","#46f0f0","#f032e6","#bcf60c","#fabebe","#008080","#e6beff","#9a6324","#fffac8","#800000","#aaffc3","#808000","#ffd8b1","#000075","#808080","#000000"];class pt{constructor(){y(this,"config",me(te()));y(this,"analysisConfig",me({domain:w.WORDS,itemsToWatch:10,calculationType:P.STATIC,alignment:4,choice:H.NORMAL,kValue:0,competType:T.RAW,competSlope:4,excludeSilence:!1}));y(this,"sortedPhonemes",F(()=>[...this.config.phonology].sort((e,r)=>e.label.localeCompare(r.label))));y(this,"sim",M(null));y(this,"lastSimConfig",M(JSON.parse(JSON.stringify(this.config))));y(this,"lastSimConfigHash",M(se(this.lastSimConfig.value)));y(this,"isConfigChanged",F(()=>this.lastSimConfigHash.value!==se(this.config)));y(this,"cyclesToCalculate",M(60));y(this,"calculatedCycles",F(()=>{var e;return((e=this.sim.value)==null?void 0:e.getStepsRun())||0}));y(this,"currentCycle",M(0));y(this,"formattedInputData",F(()=>{var e;return j((e=this.sim.value)==null?void 0:e.getInputData(this.currentCycle.value))}));y(this,"formattedFeatureData",F(()=>{var e;return j((e=this.sim.value)==null?void 0:e.getFeatureData(this.currentCycle.value))}));y(this,"formattedPhonemeData",F(()=>{var e;return j((e=this.sim.value)==null?void 0:e.getPhonemeData(this.currentCycle.value))}));y(this,"formattedWordData",F(()=>{var e;return j((e=this.sim.value)==null?void 0:e.getWordData(this.currentCycle.value))}));y(this,"formattedLevelsAndFlowData",F(()=>{var e;return j((e=this.sim.value)==null?void 0:e.getAllLevelsAndFlowData().map(([r],i)=>[i,...r.map(t=>t.toFixed(13).padEnd(18," "))]))}));y(this,"analysisData",M([]));y(this,"formattedAnalysisData",F(()=>ht(this.analysisData.value,!0)));y(this,"useBoxChart",M(!1));y(this,"isModelInputValid",M(!0))}updateAnalysis(){this.analysisData.value=ye(ne(re({},this.analysisConfig),{sim:this.sim.value})).map((e,r)=>ne(re({},e),{fill:!1,borderColor:ft[r],showLine:!0}))}runSimulation(){this.isModelInputValid.value=!0;try{const e=JSON.parse(JSON.stringify(this.config));console.time("trace.js");const r=new nt(e);r.cycle(this.cyclesToCalculate.value),console.timeEnd("trace.js"),this.currentCycle.value=Math.min(Math.max(this.currentCycle.value,0),this.calculatedCycles.value),this.sim.value=r,this.lastSimConfig.value=e,this.lastSimConfigHash.value=se(e),this.updateAnalysis()}catch(e){throw e instanceof he&&(this.isModelInputValid.value=!1),e}}}const De=Symbol(),ct=()=>{const n=new pt;return Me(De,n),n},Ot=()=>Ce(De);const mt="_nav_19fpx_2",ut="_main_19fpx_6";var gt={nav:mt,main:ut};const dt=Pe({name:"App",components:{NavigationTabs:Ke},setup(){const n=ct(),e=[{label:F(()=>`Config${n.isConfigChanged.value?" [*]":""}`),component:E(()=>v(()=>import("./ConfigTab.85d11433.js"),["assets/ConfigTab.85d11433.js","assets/ConfigTab.a7f277ab.css","assets/constants.7d013e07.js","assets/vendor.b9e80e26.js","assets/ConfigInput.b48c6f16.js","assets/BaseChart.93217dd5.js"]))},{label:"Simulation",component:E(()=>v(()=>import("./SimulationTab.a1754e96.js"),["assets/SimulationTab.a1754e96.js","assets/SimulationTab.54c345bc.css","assets/vendor.b9e80e26.js","assets/constants.7d013e07.js","assets/ConfigInput.b48c6f16.js","assets/BaseChart.93217dd5.js","assets/SimulationToolbar.f3f4b684.js","assets/SimulationToolbar.478aa04a.css"]))},{label:"Chart",component:E(()=>v(()=>import("./ChartTab.fe1db09b.js"),["assets/ChartTab.fe1db09b.js","assets/ChartTab.3dc233e5.css","assets/vendor.b9e80e26.js","assets/BaseChart.93217dd5.js","assets/SimulationToolbar.f3f4b684.js","assets/SimulationToolbar.478aa04a.css","assets/constants.7d013e07.js"]))},{label:"Chart Data",component:E(()=>v(()=>import("./ChartDataTab.ee9d5a73.js"),["assets/ChartDataTab.ee9d5a73.js","assets/DataTab.955cce70.js","assets/DataTab.57306843.css","assets/SimulationToolbar.f3f4b684.js","assets/SimulationToolbar.478aa04a.css","assets/constants.7d013e07.js","assets/vendor.b9e80e26.js"]))},{label:"Input",component:E(()=>v(()=>import("./InputTab.9a205838.js"),["assets/InputTab.9a205838.js","assets/DataTab.955cce70.js","assets/DataTab.57306843.css","assets/SimulationToolbar.f3f4b684.js","assets/SimulationToolbar.478aa04a.css","assets/constants.7d013e07.js","assets/vendor.b9e80e26.js"]))},{label:"Feature",component:E(()=>v(()=>import("./FeatureTab.1d7f0e5b.js"),["assets/FeatureTab.1d7f0e5b.js","assets/DataTab.955cce70.js","assets/DataTab.57306843.css","assets/SimulationToolbar.f3f4b684.js","assets/SimulationToolbar.478aa04a.css","assets/constants.7d013e07.js","assets/vendor.b9e80e26.js"]))},{label:"Phoneme",component:E(()=>v(()=>import("./PhonemeTab.3b9bd0e8.js"),["assets/PhonemeTab.3b9bd0e8.js","assets/DataTab.955cce70.js","assets/DataTab.57306843.css","assets/SimulationToolbar.f3f4b684.js","assets/SimulationToolbar.478aa04a.css","assets/constants.7d013e07.js","assets/vendor.b9e80e26.js"]))},{label:"Word",component:E(()=>v(()=>import("./WordTab.ffad2e70.js"),["assets/WordTab.ffad2e70.js","assets/DataTab.955cce70.js","assets/DataTab.57306843.css","assets/SimulationToolbar.f3f4b684.js","assets/SimulationToolbar.478aa04a.css","assets/constants.7d013e07.js","assets/vendor.b9e80e26.js"]))},{label:"Levels and Flow",component:E(()=>v(()=>import("./LevelsAndFlowTab.9aa24ea8.js"),["assets/LevelsAndFlowTab.9aa24ea8.js","assets/DataTab.955cce70.js","assets/DataTab.57306843.css","assets/SimulationToolbar.f3f4b684.js","assets/SimulationToolbar.478aa04a.css","assets/constants.7d013e07.js","assets/vendor.b9e80e26.js"]))}],r=M(0);return{labels:F(()=>e.map(i=>typeof i.label=="string"?i.label:i.label.value)),activeIndex:r,activeComponent:F(()=>e[r.value].component)}}}),St=He("loading...");function bt(n,e,r,i,t,o){const s=We("NavigationTabs");return V(),K(qe,null,[Y("nav",{class:Z(n.$style.nav)},[ke(s,{labels:n.labels,"active-index":n.activeIndex,"onUpdate:active-index":e[0]||(e[0]=p=>n.activeIndex=p),"is-boxed":""},null,8,["labels","active-index"])],2),Y("main",{class:Z(n.$style.main)},[(V(),ue(Te,null,{default:ge(()=>[(V(),ue(Ve(n.activeComponent)))]),fallback:ge(()=>[St]),_:1}))],2)],64)}const Pt={$style:gt};var qt=_e(dt,[["render",bt],["__cssModules",Pt]]);Be(qt).mount("#app");export{Ke as N,ot as T,_e as _,Ft as a,Dt as b,It as c,_t as d,N as e,w as f,Ot as g,T as h,H as i,P as j,yt as p};
